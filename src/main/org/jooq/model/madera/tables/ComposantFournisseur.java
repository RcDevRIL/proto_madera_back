/*
 * This file is generated by jOOQ.
 */
package org.jooq.model.madera.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.model.madera.Indexes;
import org.jooq.model.madera.Keys;
import org.jooq.model.madera.Madera;
import org.jooq.model.madera.tables.records.ComposantFournisseurRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ComposantFournisseur extends TableImpl<ComposantFournisseurRecord> {

    private static final long serialVersionUID = 20618454;

    /**
     * The reference instance of <code>madera.composant_fournisseur</code>
     */
    public static final ComposantFournisseur COMPOSANT_FOURNISSEUR = new ComposantFournisseur();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComposantFournisseurRecord> getRecordType() {
        return ComposantFournisseurRecord.class;
    }

    /**
     * The column <code>madera.composant_fournisseur.i_composant_id</code>.
     */
    public final TableField<ComposantFournisseurRecord, Integer> I_COMPOSANT_ID = createField(DSL.name("i_composant_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>madera.composant_fournisseur.i_fournisseur_id</code>.
     */
    public final TableField<ComposantFournisseurRecord, Integer> I_FOURNISSEUR_ID = createField(DSL.name("i_fournisseur_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>madera.composant_fournisseur.v_ref_fournisseur</code>.
     */
    public final TableField<ComposantFournisseurRecord, String> V_REF_FOURNISSEUR = createField(DSL.name("v_ref_fournisseur"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * Create a <code>madera.composant_fournisseur</code> table reference
     */
    public ComposantFournisseur() {
        this(DSL.name("composant_fournisseur"), null);
    }

    /**
     * Create an aliased <code>madera.composant_fournisseur</code> table reference
     */
    public ComposantFournisseur(String alias) {
        this(DSL.name(alias), COMPOSANT_FOURNISSEUR);
    }

    /**
     * Create an aliased <code>madera.composant_fournisseur</code> table reference
     */
    public ComposantFournisseur(Name alias) {
        this(alias, COMPOSANT_FOURNISSEUR);
    }

    private ComposantFournisseur(Name alias, Table<ComposantFournisseurRecord> aliased) {
        this(alias, aliased, null);
    }

    private ComposantFournisseur(Name alias, Table<ComposantFournisseurRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ComposantFournisseur(Table<O> child, ForeignKey<O, ComposantFournisseurRecord> key) {
        super(child, key, COMPOSANT_FOURNISSEUR);
    }

    @Override
    public Schema getSchema() {
        return Madera.MADERA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPOSANT_FOURNISSEUR_PKEY, Indexes.FK_FOURNISSEUR_IDX);
    }

    @Override
    public UniqueKey<ComposantFournisseurRecord> getPrimaryKey() {
        return Keys.COMPOSANT_FOURNISSEUR_PKEY;
    }

    @Override
    public List<UniqueKey<ComposantFournisseurRecord>> getKeys() {
        return Arrays.<UniqueKey<ComposantFournisseurRecord>>asList(Keys.COMPOSANT_FOURNISSEUR_PKEY);
    }

    @Override
    public List<ForeignKey<ComposantFournisseurRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ComposantFournisseurRecord, ?>>asList(Keys.COMPOSANT_FOURNISSEUR__FK_COMPOSANT_2, Keys.COMPOSANT_FOURNISSEUR__FK_FOURNISSEUR);
    }

    public Composant composant() {
        return new Composant(this, Keys.COMPOSANT_FOURNISSEUR__FK_COMPOSANT_2);
    }

    public Fournisseur fournisseur() {
        return new Fournisseur(this, Keys.COMPOSANT_FOURNISSEUR__FK_FOURNISSEUR);
    }

    @Override
    public ComposantFournisseur as(String alias) {
        return new ComposantFournisseur(DSL.name(alias), this);
    }

    @Override
    public ComposantFournisseur as(Name alias) {
        return new ComposantFournisseur(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ComposantFournisseur rename(String name) {
        return new ComposantFournisseur(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ComposantFournisseur rename(Name name) {
        return new ComposantFournisseur(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
