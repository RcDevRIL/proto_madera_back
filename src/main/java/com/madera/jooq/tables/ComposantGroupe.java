/*
 * This file is generated by jOOQ.
 */
package com.madera.jooq.tables;


import com.madera.jooq.Indexes;
import com.madera.jooq.Keys;
import com.madera.jooq.Madera;
import com.madera.jooq.tables.records.ComposantGroupeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ComposantGroupe extends TableImpl<ComposantGroupeRecord> {

    private static final long serialVersionUID = -1697697300;

    /**
     * The reference instance of <code>madera.composant_groupe</code>
     */
    public static final ComposantGroupe COMPOSANT_GROUPE = new ComposantGroupe();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComposantGroupeRecord> getRecordType() {
        return ComposantGroupeRecord.class;
    }

    /**
     * The column <code>madera.composant_groupe.i_composant_groupe_id</code>.
     */
    public final TableField<ComposantGroupeRecord, Integer> I_COMPOSANT_GROUPE_ID = createField(DSL.name("i_composant_groupe_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>madera.composant_groupe.v_libelle_groupe</code>.
     */
    public final TableField<ComposantGroupeRecord, String> V_LIBELLE_GROUPE = createField(DSL.name("v_libelle_groupe"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * Create a <code>madera.composant_groupe</code> table reference
     */
    public ComposantGroupe() {
        this(DSL.name("composant_groupe"), null);
    }

    /**
     * Create an aliased <code>madera.composant_groupe</code> table reference
     */
    public ComposantGroupe(String alias) {
        this(DSL.name(alias), COMPOSANT_GROUPE);
    }

    /**
     * Create an aliased <code>madera.composant_groupe</code> table reference
     */
    public ComposantGroupe(Name alias) {
        this(alias, COMPOSANT_GROUPE);
    }

    private ComposantGroupe(Name alias, Table<ComposantGroupeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ComposantGroupe(Name alias, Table<ComposantGroupeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ComposantGroupe(Table<O> child, ForeignKey<O, ComposantGroupeRecord> key) {
        super(child, key, COMPOSANT_GROUPE);
    }

    @Override
    public Schema getSchema() {
        return Madera.MADERA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPOSANT_GROUPE_PKEY);
    }

    @Override
    public UniqueKey<ComposantGroupeRecord> getPrimaryKey() {
        return Keys.COMPOSANT_GROUPE_PKEY;
    }

    @Override
    public List<UniqueKey<ComposantGroupeRecord>> getKeys() {
        return Arrays.<UniqueKey<ComposantGroupeRecord>>asList(Keys.COMPOSANT_GROUPE_PKEY);
    }

    @Override
    public ComposantGroupe as(String alias) {
        return new ComposantGroupe(DSL.name(alias), this);
    }

    @Override
    public ComposantGroupe as(Name alias) {
        return new ComposantGroupe(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ComposantGroupe rename(String name) {
        return new ComposantGroupe(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ComposantGroupe rename(Name name) {
        return new ComposantGroupe(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
