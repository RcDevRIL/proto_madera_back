/*
 * This file is generated by jOOQ.
 */
package com.madera.jooq.tables;


import com.madera.jooq.Indexes;
import com.madera.jooq.Keys;
import com.madera.jooq.Madera;
import com.madera.jooq.tables.records.UtilisateurRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Utilisateur extends TableImpl<UtilisateurRecord> {

    private static final long serialVersionUID = -2054774367;

    /**
     * The reference instance of <code>madera.utilisateur</code>
     */
    public static final Utilisateur UTILISATEUR = new Utilisateur();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UtilisateurRecord> getRecordType() {
        return UtilisateurRecord.class;
    }

    /**
     * The column <code>madera.utilisateur.i_utilisateur_id</code>.
     */
    public final TableField<UtilisateurRecord, Integer> I_UTILISATEUR_ID = createField(DSL.name("i_utilisateur_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('madera.utilisateur_i_utilisateur_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>madera.utilisateur.v_nom</code>.
     */
    public final TableField<UtilisateurRecord, String> V_NOM = createField(DSL.name("v_nom"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>madera.utilisateur.v_prenom</code>.
     */
    public final TableField<UtilisateurRecord, String> V_PRENOM = createField(DSL.name("v_prenom"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>madera.utilisateur.v_date_naissance</code>.
     */
    public final TableField<UtilisateurRecord, String> V_DATE_NAISSANCE = createField(DSL.name("v_date_naissance"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>madera.utilisateur.v_mail</code>.
     */
    public final TableField<UtilisateurRecord, String> V_MAIL = createField(DSL.name("v_mail"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>madera.utilisateur.v_tel</code>.
     */
    public final TableField<UtilisateurRecord, String> V_TEL = createField(DSL.name("v_tel"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>madera.utilisateur.v_login</code>.
     */
    public final TableField<UtilisateurRecord, String> V_LOGIN = createField(DSL.name("v_login"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>madera.utilisateur.v_password</code>.
     */
    public final TableField<UtilisateurRecord, String> V_PASSWORD = createField(DSL.name("v_password"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>madera.utilisateur.i_role_id</code>.
     */
    public final TableField<UtilisateurRecord, Integer> I_ROLE_ID = createField(DSL.name("i_role_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>madera.utilisateur.v_token</code>.
     */
    public final TableField<UtilisateurRecord, String> V_TOKEN = createField(DSL.name("v_token"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>madera.utilisateur</code> table reference
     */
    public Utilisateur() {
        this(DSL.name("utilisateur"), null);
    }

    /**
     * Create an aliased <code>madera.utilisateur</code> table reference
     */
    public Utilisateur(String alias) {
        this(DSL.name(alias), UTILISATEUR);
    }

    /**
     * Create an aliased <code>madera.utilisateur</code> table reference
     */
    public Utilisateur(Name alias) {
        this(alias, UTILISATEUR);
    }

    private Utilisateur(Name alias, Table<UtilisateurRecord> aliased) {
        this(alias, aliased, null);
    }

    private Utilisateur(Name alias, Table<UtilisateurRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Utilisateur(Table<O> child, ForeignKey<O, UtilisateurRecord> key) {
        super(child, key, UTILISATEUR);
    }

    @Override
    public Schema getSchema() {
        return Madera.MADERA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_ROLE_IDX, Indexes.UTILISATEUR_PKEY);
    }

    @Override
    public Identity<UtilisateurRecord, Integer> getIdentity() {
        return Keys.IDENTITY_UTILISATEUR;
    }

    @Override
    public UniqueKey<UtilisateurRecord> getPrimaryKey() {
        return Keys.UTILISATEUR_PKEY;
    }

    @Override
    public List<UniqueKey<UtilisateurRecord>> getKeys() {
        return Arrays.<UniqueKey<UtilisateurRecord>>asList(Keys.UTILISATEUR_PKEY);
    }

    @Override
    public List<ForeignKey<UtilisateurRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UtilisateurRecord, ?>>asList(Keys.UTILISATEUR__FK_ROLE);
    }

    public Role role() {
        return new Role(this, Keys.UTILISATEUR__FK_ROLE);
    }

    @Override
    public Utilisateur as(String alias) {
        return new Utilisateur(DSL.name(alias), this);
    }

    @Override
    public Utilisateur as(Name alias) {
        return new Utilisateur(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Utilisateur rename(String name) {
        return new Utilisateur(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Utilisateur rename(Name name) {
        return new Utilisateur(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, String, String, String, String, String, Integer, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
