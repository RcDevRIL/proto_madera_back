/*
 * This file is generated by jOOQ.
 */
package com.madera.jooq.tables;


import com.madera.jooq.Indexes;
import com.madera.jooq.Keys;
import com.madera.jooq.Madera;
import com.madera.jooq.tables.records.ComposantRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Composant extends TableImpl<ComposantRecord> {

    private static final long serialVersionUID = 1725833891;

    /**
     * The reference instance of <code>madera.composant</code>
     */
    public static final Composant COMPOSANT = new Composant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComposantRecord> getRecordType() {
        return ComposantRecord.class;
    }

    /**
     * The column <code>madera.composant.i_composant_id</code>.
     */
    public final TableField<ComposantRecord, Integer> I_COMPOSANT_ID = createField(DSL.name("i_composant_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('madera.composant_i_composant_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>madera.composant.i_composant_groupe_id</code>.
     */
    public final TableField<ComposantRecord, Integer> I_COMPOSANT_GROUPE_ID = createField(DSL.name("i_composant_groupe_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>madera.composant.v_libelle</code>.
     */
    public final TableField<ComposantRecord, String> V_LIBELLE = createField(DSL.name("v_libelle"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>madera.composant.i_composant_referentiel_id</code>.
     */
    public final TableField<ComposantRecord, Integer> I_COMPOSANT_REFERENTIEL_ID = createField(DSL.name("i_composant_referentiel_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>madera.composant.f_section</code>.
     */
    public final TableField<ComposantRecord, Double> F_SECTION = createField(DSL.name("f_section"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>madera.composant.f_composant_prix</code>.
     */
    public final TableField<ComposantRecord, Double> F_COMPOSANT_PRIX = createField(DSL.name("f_composant_prix"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * Create a <code>madera.composant</code> table reference
     */
    public Composant() {
        this(DSL.name("composant"), null);
    }

    /**
     * Create an aliased <code>madera.composant</code> table reference
     */
    public Composant(String alias) {
        this(DSL.name(alias), COMPOSANT);
    }

    /**
     * Create an aliased <code>madera.composant</code> table reference
     */
    public Composant(Name alias) {
        this(alias, COMPOSANT);
    }

    private Composant(Name alias, Table<ComposantRecord> aliased) {
        this(alias, aliased, null);
    }

    private Composant(Name alias, Table<ComposantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Composant(Table<O> child, ForeignKey<O, ComposantRecord> key) {
        super(child, key, COMPOSANT);
    }

    @Override
    public Schema getSchema() {
        return Madera.MADERA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPOSANT_PKEY, Indexes.FK_COMPOSANT_GROUPE_IDX, Indexes.FK_COMPOSANT_REFERENTIEL_IDX);
    }

    @Override
    public Identity<ComposantRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMPOSANT;
    }

    @Override
    public UniqueKey<ComposantRecord> getPrimaryKey() {
        return Keys.COMPOSANT_PKEY;
    }

    @Override
    public List<UniqueKey<ComposantRecord>> getKeys() {
        return Arrays.<UniqueKey<ComposantRecord>>asList(Keys.COMPOSANT_PKEY);
    }

    @Override
    public List<ForeignKey<ComposantRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ComposantRecord, ?>>asList(Keys.COMPOSANT__FK_COMPOSANT_GROUPE, Keys.COMPOSANT__FK_COMPOSANT_REFERENTIEL);
    }

    public ComposantGroupe composantGroupe() {
        return new ComposantGroupe(this, Keys.COMPOSANT__FK_COMPOSANT_GROUPE);
    }

    public ComposantReferentiel composantReferentiel() {
        return new ComposantReferentiel(this, Keys.COMPOSANT__FK_COMPOSANT_REFERENTIEL);
    }

    @Override
    public Composant as(String alias) {
        return new Composant(DSL.name(alias), this);
    }

    @Override
    public Composant as(Name alias) {
        return new Composant(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Composant rename(String name) {
        return new Composant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Composant rename(Name name) {
        return new Composant(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, Integer, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
