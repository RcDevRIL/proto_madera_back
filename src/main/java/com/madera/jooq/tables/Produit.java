/*
 * This file is generated by jOOQ.
 */
package com.madera.jooq.tables;


import com.madera.jooq.Indexes;
import com.madera.jooq.Keys;
import com.madera.jooq.Madera;
import com.madera.jooq.tables.records.ProduitRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Produit extends TableImpl<ProduitRecord> {

    private static final long serialVersionUID = 1488932999;

    /**
     * The reference instance of <code>madera.produit</code>
     */
    public static final Produit PRODUIT = new Produit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProduitRecord> getRecordType() {
        return ProduitRecord.class;
    }

    /**
     * The column <code>madera.produit.i_produit_id</code>.
     */
    public final TableField<ProduitRecord, Integer> I_PRODUIT_ID = createField(DSL.name("i_produit_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('madera.produit_i_produit_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>madera.produit.v_produit_nom</code>.
     */
    public final TableField<ProduitRecord, String> V_PRODUIT_NOM = createField(DSL.name("v_produit_nom"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>madera.produit.i_gammes_id</code>.
     */
    public final TableField<ProduitRecord, Integer> I_GAMMES_ID = createField(DSL.name("i_gammes_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>madera.produit.f_prix_produit</code>.
     */
    public final TableField<ProduitRecord, Double> F_PRIX_PRODUIT = createField(DSL.name("f_prix_produit"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>madera.produit.b_modele</code>.
     */
    public final TableField<ProduitRecord, Boolean> B_MODELE = createField(DSL.name("b_modele"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>madera.produit</code> table reference
     */
    public Produit() {
        this(DSL.name("produit"), null);
    }

    /**
     * Create an aliased <code>madera.produit</code> table reference
     */
    public Produit(String alias) {
        this(DSL.name(alias), PRODUIT);
    }

    /**
     * Create an aliased <code>madera.produit</code> table reference
     */
    public Produit(Name alias) {
        this(alias, PRODUIT);
    }

    private Produit(Name alias, Table<ProduitRecord> aliased) {
        this(alias, aliased, null);
    }

    private Produit(Name alias, Table<ProduitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Produit(Table<O> child, ForeignKey<O, ProduitRecord> key) {
        super(child, key, PRODUIT);
    }

    @Override
    public Schema getSchema() {
        return Madera.MADERA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRODUIT_KEY);
    }

    @Override
    public Identity<ProduitRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRODUIT;
    }

    @Override
    public UniqueKey<ProduitRecord> getPrimaryKey() {
        return Keys.PRODUIT_KEY;
    }

    @Override
    public List<UniqueKey<ProduitRecord>> getKeys() {
        return Arrays.<UniqueKey<ProduitRecord>>asList(Keys.PRODUIT_KEY);
    }

    @Override
    public List<ForeignKey<ProduitRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProduitRecord, ?>>asList(Keys.PRODUIT__PRODUIT);
    }

    public Gammes gammes() {
        return new Gammes(this, Keys.PRODUIT__PRODUIT);
    }

    @Override
    public Produit as(String alias) {
        return new Produit(DSL.name(alias), this);
    }

    @Override
    public Produit as(Name alias) {
        return new Produit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Produit rename(String name) {
        return new Produit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Produit rename(Name name) {
        return new Produit(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Integer, Double, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
