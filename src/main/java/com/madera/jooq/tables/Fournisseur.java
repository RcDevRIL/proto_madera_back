/*
 * This file is generated by jOOQ.
 */
package com.madera.jooq.tables;


import com.madera.jooq.Indexes;
import com.madera.jooq.Keys;
import com.madera.jooq.Madera;
import com.madera.jooq.tables.records.FournisseurRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fournisseur extends TableImpl<FournisseurRecord> {

    private static final long serialVersionUID = 732871771;

    /**
     * The reference instance of <code>madera.fournisseur</code>
     */
    public static final Fournisseur FOURNISSEUR = new Fournisseur();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FournisseurRecord> getRecordType() {
        return FournisseurRecord.class;
    }

    /**
     * The column <code>madera.fournisseur.i_fournisseur_id</code>.
     */
    public final TableField<FournisseurRecord, Integer> I_FOURNISSEUR_ID = createField(DSL.name("i_fournisseur_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('madera.fournisseur_i_fournisseur_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>madera.fournisseur.v_raison_soc</code>.
     */
    public final TableField<FournisseurRecord, String> V_RAISON_SOC = createField(DSL.name("v_raison_soc"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>madera.fournisseur.i_adresse_id</code>.
     */
    public final TableField<FournisseurRecord, Integer> I_ADRESSE_ID = createField(DSL.name("i_adresse_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>madera.fournisseur</code> table reference
     */
    public Fournisseur() {
        this(DSL.name("fournisseur"), null);
    }

    /**
     * Create an aliased <code>madera.fournisseur</code> table reference
     */
    public Fournisseur(String alias) {
        this(DSL.name(alias), FOURNISSEUR);
    }

    /**
     * Create an aliased <code>madera.fournisseur</code> table reference
     */
    public Fournisseur(Name alias) {
        this(alias, FOURNISSEUR);
    }

    private Fournisseur(Name alias, Table<FournisseurRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fournisseur(Name alias, Table<FournisseurRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Fournisseur(Table<O> child, ForeignKey<O, FournisseurRecord> key) {
        super(child, key, FOURNISSEUR);
    }

    @Override
    public Schema getSchema() {
        return Madera.MADERA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_ADRESSE_IDX, Indexes.FOURNISSEUR_PKEY);
    }

    @Override
    public Identity<FournisseurRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FOURNISSEUR;
    }

    @Override
    public UniqueKey<FournisseurRecord> getPrimaryKey() {
        return Keys.FOURNISSEUR_PKEY;
    }

    @Override
    public List<UniqueKey<FournisseurRecord>> getKeys() {
        return Arrays.<UniqueKey<FournisseurRecord>>asList(Keys.FOURNISSEUR_PKEY);
    }

    @Override
    public List<ForeignKey<FournisseurRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FournisseurRecord, ?>>asList(Keys.FOURNISSEUR__FK_ADRESSE_2);
    }

    public Adresse adresse() {
        return new Adresse(this, Keys.FOURNISSEUR__FK_ADRESSE_2);
    }

    @Override
    public Fournisseur as(String alias) {
        return new Fournisseur(DSL.name(alias), this);
    }

    @Override
    public Fournisseur as(Name alias) {
        return new Fournisseur(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fournisseur rename(String name) {
        return new Fournisseur(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Fournisseur rename(Name name) {
        return new Fournisseur(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
